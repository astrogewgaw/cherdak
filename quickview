#!/usr/bin/env python

import click
import numpy as np
import proplot as pplt
from pathlib import Path
from astropy.io import fits
from pabo.core import unpack
from rich.console import Console
from priwo.sigproc.fil import readfil

pplt.rc.update(
    {
        "font.size": 20,
        "suptitle.pad": 20,
        "subplots.tight": True,
        "subplots.refwidth": 6.5,
        "subplots.panelpad": 1.5,
    }
)

console = Console()


def quickview(
    fn: str,
    t1: float,
    t2: float,
    f1: float,
    f2: float,
    of: str,
) -> None:
    f = Path(fn).resolve()
    if f.suffix in [".sf", ".fits"]:
        with fits.open(f) as hdus:
            mainhdr = hdus["PRIMARY"].header
            subhdu = hdus["SUBINT"]
            subhdr = subhdu.header
            subints = subhdu.data

            data = np.concatenate(
                [
                    np.fliplr(
                        subint[-1][
                            :,
                            0,
                            :,
                        ]
                    )
                    for subint in subints
                ]
            ).T

        dt = subhdr["TBIN"]
        nf = subhdr["NCHAN"]
        df = -1.0 * np.abs(subhdr["CHAN_BW"])

        fl = (
            mainhdr["OBSFREQ"]
            - np.abs(mainhdr["OBSBW"]) / 2.0
            + np.abs(subhdr["CHAN_BW"]) / 2.0
        )

        fh = (
            mainhdr["OBSFREQ"]
            + np.abs(mainhdr["OBSBW"]) / 2.0
            - np.abs(subhdr["CHAN_BW"]) / 2.0
        )

        nbits = subhdr["NBITS"]
        if nbits < 8:
            data = unpack(data.flatten(), nbits=nbits).reshape(nf, -1)

    elif f.suffix == ".fil":
        hdr, data = readfil(f)
        fh = hdr["fch1"]
        df = hdr["foff"]
        dt = hdr["tsamp"]
        nf = hdr["nchans"]
        fl = fh + (nf * df)
    else:
        raise ValueError("This format is not supported.")

    _, nt = data.shape

    tobs = nt * dt
    fbeg = 0 if f1 is None else int((f1 - fl) / -df)
    fend = nf if f2 is None else int((f2 - fl) / -df)
    tbeg = 0 if t1 is None else int(t1 / tobs * nt)
    tend = nt if t2 is None else int(t2 / tobs * nt)
    view = data[fbeg:fend, tbeg:tend]

    rms = view.std()
    mean = view.mean()

    fig = pplt.figure()
    ax = fig.subplot()
    ax.imshow(
        view,
        vmin=(mean - rms),
        vmax=(mean + rms),
        aspect="auto",
        extent=[
            0 if t1 is None else t1,
            tobs if t2 is None else t2,
            fl if f1 is None else f1,
            fh if f2 is None else f2,
        ],
    )
    ax.format(
        suptitle=f"{f.name}",
        xlabel="Time, $t$ (in seconds)",
        ylabel="Frequency, $\\nu$ (in MHz)",
    )
    fig.save(f.with_suffix(".png").name if of is None else of, dpi=300)


@click.command()
@click.option("-t2", type=float, help="End time.")
@click.option("-t1", type=float, help="Start time.")
@click.option("-f1", type=float, help="Lower frequency.")
@click.option("-f2", type=float, help="Upper frequency.")
@click.argument("infile", type=click.Path(exists=True))
@click.option("-o", type=click.Path(), help="Output file name.")
def main(
    o: str,
    t1: float,
    t2: float,
    f1: float,
    f2: float,
    infile: str,
) -> None:
    """
    Quickly check out simulation files.
    """

    with console.status("Plotting..."):
        quickview(infile, t1, t2, f1, f2, o)


if __name__ == "__main__":
    main()
