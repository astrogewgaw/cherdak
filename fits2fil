#!/usr/bin/env python

import click
import pabo as pb
import numpy as np

from pathlib import Path
from astropy.io import fits
from rich.console import Console
from priwo.sigproc.hdr import writehdr


console = Console()


def fits2fil(
    f: str,
    unpack: bool = False,
    killmask: list[tuple[int, int]] | None = None,
) -> None:
    fn = Path(f).resolve()
    fdir = fn.parent
    ofn = fn.stem

    with fits.open(fn) as hdus:
        mainhdr = hdus["PRIMARY"].header
        hdu = hdus["SUBINT"]
        subhdr = hdu.header
        subints = hdu.data

        data = []
        nbits = subhdr["NBITS"]
        for subint in subints:
            chunk = subint[-1]
            chunk = chunk[:, 0, :]
            if subhdr["CHAN_BW"] > 0:
                chunk = np.fliplr(chunk)
            if unpack:
                cnt, cnf = chunk.shape
                chunk = pb.core.unpack(
                    chunk.flatten(),
                    nbits=nbits,
                ).reshape(cnt, cnf * (8 // nbits))
            data.append(chunk)
        data = np.concatenate(data)

        if killmask is not None:
            if len(killmask) > 0:
                killmask = list(killmask)
                for mask in killmask:
                    data[:, slice(*[_ - 1 for _ in mask])] = 0
                    ofn += "_{}_{}".format(*mask)
        ofn += ".fil"

        writehdr(
            {
                "source_name": mainhdr["SRC_NAME"],
                "rawdatafile": str(fn.name),
                "nbits": 8 if unpack else nbits,
                "data_type": 1,
                "telescope_id": int(
                    {
                        "Fake": 0,
                        "Arecibo": 1,
                        "ARECIBO 305m": 1,
                        "Ooty": 2,
                        "Nancay": 3,
                        "Parkes": 4,
                        "Jodrell": 5,
                        "GBT": 6,
                        "GMRT": 7,
                        "Effelsberg": 8,
                        "ATA": 9,
                        "SRT": 10,
                        "LOFAR": 11,
                        "VLA": 12,
                        "CHIME": 20,
                        "FAST": 21,
                        "MeerKAT": 64,
                        "KAT-7": 65,
                    }.get(mainhdr["TELESCOP"], 0)
                ),
                "machine_id": int(
                    {
                        "FAKE": 0,
                        "PSPM": 1,
                        "Wapp": 2,
                        "WAPP": 2,
                        "AOFTM": 3,
                        "BCPM1": 4,
                        "BPP": 4,
                        "OOTY": 5,
                        "SCAMP": 6,
                        "GBT Pulsar Spigot": 7,
                        "SPIGOT": 7,
                        "BG/P": 11,
                        "PDEV": 12,
                        "CHIME+PSR": 20,
                        "KAT": 64,
                        "KAT-DC2": 65,
                    }.get(mainhdr["BACKEND"], 0)
                ),
                "barycentric": 0,
                "pulsarcentric": 0,
                "az_start": subints[0]["TEL_AZ"],
                "za_start": subints[0]["TEL_ZEN"],
                "nifs": subhdr["NPOL"],
                "tsamp": subhdr["TBIN"],
                "nchans": subhdr["NCHAN"],
                "foff": -1.0 * np.abs(subhdr["CHAN_BW"]),
                "src_raj": float(mainhdr["RA"].replace(":", "")),
                "src_dej": float(mainhdr["DEC"].replace(":", "")),
                "fch1": (
                    mainhdr["OBSFREQ"]
                    + np.abs(mainhdr["OBSBW"]) / 2.0
                    - np.abs(subhdr["CHAN_BW"]) / 2.0
                ),
                "tstart": (
                    mainhdr["STT_IMJD"]
                    + mainhdr["STT_SMJD"] / 86400.0
                    + mainhdr["STT_OFFS"] / 86400.0
                ),
                "size": 0,
            },
            fdir / ofn,
        )
        with open(fdir / ofn, "ab") as ofp:
            data.tofile(ofp)


@click.command()
@click.option("-u", "--unpack", is_flag=True)
@click.argument("infiles", nargs=-1, type=click.Path(exists=True))
@click.option("-k", "--killmask", type=click.Tuple([int, int]), multiple=True)
def main(
    infiles: list[str],
    unpack: bool = False,
    killmask: list[tuple[int, int]] | None = None,
):
    """
    Convert a PSRFITS file to a SIGPROC filterbank file.
    """

    with console.status("Converting..."):
        for infile in infiles:
            fits2fil(infile, unpack=unpack, killmask=killmask)


if __name__ == "__main__":
    main()
